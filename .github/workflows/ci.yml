name: CI/CD Pipeline

on:
  push:
    branches: [main, develop, feature/*]
    paths-ignore:
      - '*.md'
      - 'docs/**'
      - '.gitignore'
  pull_request:
    branches: [main, develop]
    paths-ignore:
      - '*.md'
      - 'docs/**'
      - '.gitignore'

env:
  BUILD_TYPE: Release
  COVERAGE_MIN_THRESHOLD: 80
  KERNEL_VERSION: "6.6.87.2-microsoft-standard-WSL2"

jobs:
  # Environment setup and validation
  setup:
    runs-on: ubuntu-latest
    outputs:
      kernel-version: ${{ steps.kernel-info.outputs.version }}
      should-run-tests: ${{ steps.changes.outputs.should-run }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Detect changes
        id: changes
        run: |
          if git diff --name-only HEAD^ HEAD | grep -E '\.(c|h|py|sh|yml|yaml|Makefile|Dockerfile)$'; then
            echo "should-run=true" >> $GITHUB_OUTPUT
          else
            echo "should-run=false" >> $GITHUB_OUTPUT
          fi

      - name: Get kernel info
        id: kernel-info
        run: |
          echo "version=$(uname -r)" >> $GITHUB_OUTPUT

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            ~/.local/lib/python*/site-packages
            ~/ci-cache
            /tmp/ci-deps
            ~/.cache/node
            ~/.npm
          key: deps-v3-${{ runner.os }}-${{ hashFiles('tests/e2e/framework/requirements.txt', 'scripts/ci-setup.sh') }}-${{ github.run_number }}
          restore-keys: |
            deps-v3-${{ runner.os }}-${{ hashFiles('tests/e2e/framework/requirements.txt', 'scripts/ci-setup.sh') }}-
            deps-v3-${{ runner.os }}-
          # Optimized cache paths - only user-writable directories
          # Excludes system apt cache to prevent permission issues
          # Size limited to 1GB, expires after 7 days

  # Unit tests
  unit-tests:
    runs-on: ubuntu-latest
    needs: setup
    if: needs.setup.outputs.should-run-tests == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup CI environment
        run: |
          sudo apt-get update
          chmod +x scripts/ci-setup-smart.sh
          ./scripts/ci-setup-smart.sh

      - name: Build project
        run: |
          make clean
          make all

      - name: Run unit tests
        run: |
          chmod +x scripts/test-runner-strict.sh
          ./scripts/test-runner-strict.sh unit
          
      - name: Generate coverage report
        run: |
          make coverage || true

      - name: Upload unit test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: unit-test-results
          path: |
            test-results/unit/
            coverage/
          retention-days: 7

  # Linting and static analysis
  lint:
    runs-on: ubuntu-latest
    needs: setup
    if: needs.setup.outputs.should-run-tests == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup CI environment
        run: |
          sudo apt-get update
          chmod +x scripts/ci-setup-smart.sh
          ./scripts/ci-setup-smart.sh

      - name: Run linting
        run: |
          make lint

      - name: Upload lint results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: lint-results
          path: lint-results/
          retention-days: 7

  # Docker E2E tests
  e2e-tests:
    runs-on: ubuntu-latest
    needs: [setup, unit-tests]
    if: needs.setup.outputs.should-run-tests == 'true'
    strategy:
      fail-fast: false
      matrix:
        test-type: [simulator, framework, integration]
        include:
          - test-type: simulator
            test-path: tests/e2e/simulator
            timeout: 15
          - test-type: framework
            test-path: tests/e2e/framework
            timeout: 20
          - test-type: integration
            test-path: tests/e2e
            timeout: 25

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Setup CI environment
        run: |
          sudo apt-get update
          chmod +x scripts/ci-setup-smart.sh
          ./scripts/ci-setup-smart.sh

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: |
            /tmp/.buildx-cache
            ~/.docker/buildx-cache
            ~/.cache/docker
          key: buildx-v3-${{ runner.os }}-${{ matrix.test-type }}-${{ hashFiles('tests/e2e/docker/Dockerfile*', 'tests/e2e/docker/docker-compose.yml') }}
          restore-keys: |
            buildx-v3-${{ runner.os }}-${{ matrix.test-type }}-
            buildx-v3-${{ runner.os }}-
          # Optimized Docker cache with size limits
          # Includes user-space Docker cache directories only

      - name: Build Docker test environment
        run: |
          cd tests/e2e/docker
          docker compose build mpu6050-e2e-tests
        env:
          BUILD_DATE: ${{ github.event.head_commit.timestamp }}
          VCS_REF: ${{ github.sha }}

      - name: Run E2E tests - ${{ matrix.test-type }}
        timeout-minutes: ${{ matrix.timeout }}
        run: |
          cd tests/e2e/docker
          export TEST_TYPE=${{ matrix.test-type }}
          export TEST_VERBOSE=true
          export CI=true
          export GITHUB_ACTIONS=true
          export BUILD_NUMBER=${{ github.run_number }}
          export GIT_COMMIT=${{ github.sha }}
          export GIT_BRANCH=${{ github.ref_name }}
          
          # Run specific test suite
          case "${{ matrix.test-type }}" in
            "simulator")
              docker compose run --rm mpu6050-e2e-tests /opt/mpu6050-test/tests/e2e/simulator/integration_test.sh
              ;;
            "framework")
              docker compose run --rm mpu6050-e2e-tests python3 -m pytest /opt/mpu6050-test/tests/e2e/framework/ -v --junitxml=/opt/mpu6050-test/results/pytest-results.xml
              ;;
            "integration")
              docker compose run --rm mpu6050-e2e-tests /opt/mpu6050-test/tests/e2e/run_e2e_tests.sh --verbose
              ;;
          esac

      - name: Collect test results
        if: always()
        run: |
          cd tests/e2e/docker
          docker compose run --rm -v $(pwd)/test-results:/host-results mpu6050-e2e-tests sh -c "
            cp -r /opt/mpu6050-test/results/* /host-results/ 2>/dev/null || true
            cp -r /var/log/mpu6050-test/* /host-results/ 2>/dev/null || true
          "

      - name: Generate performance metrics
        if: always()
        run: |
          cd tests/e2e/docker
          if [ -f test-results/python_test_report.json ]; then
            echo "## Performance Metrics - ${{ matrix.test-type }}" >> $GITHUB_STEP_SUMMARY
            python3 -c "
            import json
            try:
              with open('test-results/python_test_report.json', 'r') as f:
                data = json.load(f)
                if 'performance' in data:
                  print('| Metric | Value |')
                  print('|--------|-------|')
                  for k, v in data['performance'].items():
                    print(f'| {k} | {v} |')
            except:
              pass
            " >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-test-results-${{ matrix.test-type }}
          path: |
            tests/e2e/docker/test-results/
            tests/e2e/docker/test-logs/
          retention-days: 7

      - name: Upload test reports
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: E2E Tests - ${{ matrix.test-type }}
          path: tests/e2e/docker/test-results/**/pytest-results.xml
          reporter: java-junit
          fail-on-error: false

  # Enhanced Security scanning with comprehensive testing
  security:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
    strategy:
      matrix:
        scan-type: [sast, sca, dast, fuzzing]
        include:
          - scan-type: sast
            timeout: 20
          - scan-type: sca  
            timeout: 15
          - scan-type: dast
            timeout: 25
          - scan-type: fuzzing
            timeout: 30
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup security scanning environment
        run: |
          sudo apt-get update
          chmod +x scripts/ci-setup-smart.sh
          ./scripts/ci-setup-smart.sh

      - name: Run comprehensive security scan - ${{ matrix.scan-type }}
        timeout-minutes: ${{ matrix.timeout }}
        run: |
          chmod +x scripts/security_scan.sh
          ./scripts/security_scan.sh --${{ matrix.scan-type }} \
            --report-format sarif \
            --output-dir security-results \
            --severity-filter medium || true

      - name: Run dependency vulnerability scan
        if: matrix.scan-type == 'sca'
        timeout-minutes: 10
        run: |
          chmod +x scripts/dependency_scan.py
          python3 scripts/dependency_scan.py \
            --output-format json \
            --output-dir security-results || true

      - name: Run Trivy filesystem scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'security-results/trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'

      - name: Upload security scan results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: security-results/trivy-results.sarif
          category: trivy-${{ matrix.scan-type }}

      - name: Upload security artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-results-${{ matrix.scan-type }}
          path: security-results/
          retention-days: 30

  # Build and publish Docker image
  docker-build:
    runs-on: ubuntu-latest
    needs: [unit-tests, lint, e2e-tests]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: tests/e2e/docker/Dockerfile.e2e
          target: test-environment
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/mpu6050-e2e-test:latest
            ${{ secrets.DOCKER_USERNAME }}/mpu6050-e2e-test:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            VCS_REF=${{ github.sha }}

  # Collect and report results
  report:
    runs-on: ubuntu-latest
    needs: [unit-tests, lint, e2e-tests]
    if: always() && needs.setup.outputs.should-run-tests == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Install report dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-pip
          pip3 install jinja2 matplotlib pandas

      - name: Generate comprehensive report
        run: |
          python3 -c "
          import os, json, glob
          from datetime import datetime
          
          report = {
            'timestamp': datetime.now().isoformat(),
            'commit': '${{ github.sha }}',
            'branch': '${{ github.ref_name }}',
            'run_number': ${{ github.run_number }},
            'results': {}
          }
          
          # Collect test results
          for result_dir in glob.glob('*-test-results*'):
            if os.path.isdir(result_dir):
              test_type = result_dir.replace('-test-results', '').replace('e2e-test-results-', 'e2e-')
              report['results'][test_type] = {
                'status': 'completed',
                'files': os.listdir(result_dir)
              }
          
          with open('ci-report.json', 'w') as f:
            json.dump(report, f, indent=2)
          
          # Generate markdown summary
          with open('CI_SUMMARY.md', 'w') as f:
            f.write('# CI/CD Pipeline Summary\\n\\n')
            f.write(f'**Commit:** {report[\"commit\"][:8]}\\n')
            f.write(f'**Branch:** {report[\"branch\"]}\\n')
            f.write(f'**Run:** #{report[\"run_number\"]}\\n\\n')
            f.write('## Test Results\\n\\n')
            for test, result in report['results'].items():
              f.write(f'- **{test}**: {result[\"status\"]}\\n')
          "

      - name: Upload final report
        uses: actions/upload-artifact@v4
        with:
          name: ci-comprehensive-report
          path: |
            ci-report.json
            CI_SUMMARY.md
          retention-days: 30

      - name: Comment PR with results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            if (fs.existsSync('CI_SUMMARY.md')) {
              const summary = fs.readFileSync('CI_SUMMARY.md', 'utf8');
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: summary
              });
            }

  # Cleanup
  cleanup:
    runs-on: ubuntu-latest
    needs: [report, docker-build]
    if: always()
    steps:
      - name: Cleanup Docker resources
        run: |
          docker system prune -f
          docker volume prune -f