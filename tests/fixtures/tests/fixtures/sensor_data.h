
#ifndef SENSOR_DATA_H
#define SENSOR_DATA_H

#include <stdint.h>

/**
 * Mock MPU-6050 sensor data for testing
 * Generated on: 2025-08-06T20:02:17.904209
 */

typedef struct {
    int16_t accel_x;    // Accelerometer X-axis (±2g range)
    int16_t accel_y;    // Accelerometer Y-axis (±2g range)
    int16_t accel_z;    // Accelerometer Z-axis (±2g range)
    int16_t temp;       // Temperature sensor
    int16_t gyro_x;     // Gyroscope X-axis (±250°/s range)
    int16_t gyro_y;     // Gyroscope Y-axis (±250°/s range)  
    int16_t gyro_z;     // Gyroscope Z-axis (±250°/s range)
} mpu6050_data_t;

// Test data array
static const mpu6050_data_t test_sensor_data[] = {
    {  -2057,  13054,  20649,  -7228,  -7408,     12,   5646 },
    {   -722, -11463,  24047, -17979,   5042,  -2094,   8015 },
    {  -1994,   9980,  11442, -25751,  -5102,   6221,  -7871 },
    {  -7654,   6418,  18063,  -5424,  -8154,   6176,   5529 },
    {   5160, -13759,  10266,   2069,  -5844,   4395,   3095 },
    {   6943,    655,  11804,  -2293,   6901,  -7991,  -3880 },
    {   6597,    132,  19544, -19919,   3998,   2700,   6813 },
    {   -462,  12643,  24120,   8391,    176,  -3885,   -250 },
    {   9262,  -8453,  24120,  15729,  -2276,   -337,   7899 },
    { -14946,   2591,  15583, -24267,  -5046,   1937,   -465 },
    {  -6202,  16195,  19814,  -1361,  -1616,   -514,   -610 },
    { -15931, -15359,   8396,   9837,   7399,  -7516,   -597 },
    {  10818,   1986,  13952,   8556,  -7217,   2952,   6656 },
    {  -1827,  -6039,   8603, -22267,   7483,  -7860,  -1034 },
    { -10256,   -954,   9752, -21209,  -4983,  -6731,   4788 },
    { -10045, -12372,  12434, -10110,  -2093,  -6913,   -186 },
    {   4712,   9051,  12810, -13189,   6607,  -6462,   6907 },
    {  10178,   4584,   8787,    -70,   2341,   6322,  -7405 },
    {   9484,  10308,  15146, -22020,  -3005,    532,  -4090 },
    {   6078, -15864,  20119,  -8839,   1227,  -1843,  -2520 },
    {  15177, -15880,  10679, -24673,  -6417,   6980,  -1485 },
    {  13153,  12833,   8518,  13095,  -4361,   3393,   1054 },
    {   9768,  -4725,  10558, -17182,  -7088,   1958,  -2956 },
    { -14459,   1349,   9397, -18700,  -7088,   3530,   2999 },
    {   7799,    680,  24542,   4425,  -1966,   8160,  -3910 },
    {  -4766,  -3104,  20745,  13497,   4216,  -6686,   2299 },
    {  -3187,  15367,  20622,  10637,   7342,  -7517,    261 },
    {  -9757,   4493,  10755, -15131,  -3728,  -4749,  -1230 },
    {   4679,  14068,  17229,   4822,   2261,  -5132,  -1380 },
    {  10002,  11517,  10414,  -2191,   -605,  -1658,   -660 },
    {  -5199,  10712,  15692,  -1208,     -3,   7144,  -7538 },
    { -15870,  14145,  13963,   4765,   -761,   1089,    -59 },
    {  -6723,   1011,  14568,   4198,   5780,  -1606,  -2036 },
    {   8429,  -2814,  20676, -12142,   5025,   4338,   3515 },
    {  14434,   2411,  18460, -24974,  -7521,  -5054,  -4391 },
    {   2728,   1463,  21641,  -4130,    631,   3980,  -3119 },
    {   -897,  12612,  10858, -13956,  -6802,    801,  -3309 },
    {  -1188,  -4866,  16778,  -6124,  -1680,    656,   2459 },
    {  -6115,  13634,  12679,   8644,  -2974,   5891,   4839 },
    {   2289,   1942,  12981,  14295,  -5741,   -179,  -5662 },
    {   8802, -14728,  17910, -11844,  -2347,  -1370,  -4075 },
    {  11335,  -6149,  20816, -14307,   2398,  -5597,   4944 },
    { -10215,   3171,  15964, -19162,   4958,   2638,    319 },
    {   3949,   1097,  18983,  -1435,  -1799,   2770,  -6244 },
    {   6580,  10302,  10757,   9048,  -1441,   3720,  -7284 },
    {   3561,  10979,  23674,  10628,  -7674,   1289,  -3499 },
    { -13965,  -6572,  10104,   9686,   7114,  -5193,    754 },
    {   1883,   6953,   9540,   9054,   5415,  -2087,  -6731 },
    {  -4345, -12574,   9462,  10113,  -7113,   6521,  -3994 },
    {   3604,   5210,  10789,  -5661,    494,   5521,   1876 },
    {    802,  14478,  10626, -14519,  -5171,   1143,   3594 },
    { -16009,   -745,  10609,   3847,   -503,  -6647,  -3171 },
    { -14683,    957,  10853,  -9818,   2415,  -3454,   1837 },
    {  -9819,   9145,  18779, -20843,  -1458,   1078,  -3533 },
    { -10704,  13189,  20312,  16391,  -7319,   1866,  -5916 },
    { -11517,  -4440,  12355, -10252,   6747,   3848,  -6662 },
    { -11220, -16195,  10051,   3097,  -3244,   8087,   2445 },
    {  -6514,  10769,  15044,  11008,  -4583,  -7610,   8166 },
    {   6906,   1425,  14340,  -7796,  -5281,  -7134,   -695 },
    { -15934, -11388,  22383,  -1546,   6426,  -4510,   5917 },
    {  -8995,   5732,  17763, -24421,   4455,  -1423,  -4003 },
    {  -4961,   8819,  19853, -13997,   2197,  -3489,  -4907 },
    {  -4743,   3525,  12307, -20805,   6278,   3471,   -575 },
    {  -5411,  15223,  14492,  16038,  -4968,  -4391,  -2676 },
    {  -9436,  11248,  24021,   5483,  -2816,  -3388,   -131 },
    { -12302,  -5202,  17600,   -987,  -3166,  -4749,   4892 },
    {   3838,  -9768,  10750,   7233,  -5842,   2869,   4460 },
    {  13837,  -8677,  13168,  -7812,   6500,   2964,   4278 },
    { -12062,   2811,  23519,   1554,  -6143,   1307,  -3364 },
    {   3675,   4760,  20911,  -2870,  -2612,  -1460,   2299 },
    {  -6727,   8700,  15464,  -4523,  -3680,  -6033,   4347 },
    {   8508, -13687,  10440,   7445,   7664,  -7116,   7936 },
    { -10679,   7177,  20440,  -8481,  -3972,  -6175,   -364 },
    {  -6155,  11654,  14782, -12676,  -8143,  -4645,   1791 },
    {  -9616,  -5744,  18251,   2765,   6099,   6213,  -2619 },
    {  -8211,  14330,  22084,   3358,  -5983,  -7904,  -5308 },
    {  -2127,  -1042,  17441, -25834,   2379,  -6749,   6242 },
    {  -9446,  14359,  15827, -10495,   7000,  -5882,   6392 },
    {  12251,  -9738,  21180,  -6592,   1321,   4081,   7508 },
    {   7311,  -7031,  15197, -11058,   -603,   1811,   -470 },
    {   2125,  -6001,  19788,  -7408,  -3984,   6740,   1172 },
    { -12756,   7142,   9693,   5396,  -2386,  -2628,   7205 },
    {  10125,   3266,  13412,  -5860,   3654,   4998,    656 },
    {   5618,  -7277,  18210,  10899,   6033,   5984,  -2871 },
    {  -7966,  13230,  22507,  10175,   7584,  -6675,   1977 },
    {  -9129,   9895,  17052, -16074,    158,   2832,  -3670 },
    {  -4420,    286,  14924, -25955,   2978,  -5469,   4482 },
    {   5210,  15811,  13522,   -131,   7892,   5046,   5774 },
    {    748, -14694,  23141,  14798,   7240,   4855,   5872 },
    {   6541,   4526,  13370,   4395,  -3944,  -7140,  -6336 },
    {   2194,  12323,  15973, -22645,  -2736,  -2318,   3629 },
    { -12319,   8647,  24310,  -7626,  -2530,  -2114,   4222 },
    {   9391,   1145,  22446,  10213,   6276,    100,  -4421 },
    {   8245,  14316,  17423, -22666,  -6548,  -6989,   7888 },
    {   4977,  -4450,  20372,  -1117,   3302,  -1251,   2322 },
    {   9675,  -1302,  15122, -15386,   1016,   6950,  -4420 },
    {   1141,  14429,  16281, -17176,   6727,   5583,  -3723 },
    { -10484,  -2653,  17721,   4273,   3879,   2307,   6417 },
    {  -8723,   5708,   8691, -13819,   7415,  -3377,   2618 },
    {   7692,  10998,  15344, -10756,  -4316,  -5805,  -5401 }
};

#define TEST_SENSOR_DATA_COUNT (sizeof(test_sensor_data) / sizeof(test_sensor_data[0]))

// Predefined test scenarios
typedef enum {
    TEST_SCENARIO_NORMAL = 0,
    TEST_SCENARIO_HIGH_ACCEL,
    TEST_SCENARIO_HIGH_GYRO,
    TEST_SCENARIO_TEMPERATURE_EXTREME,
    TEST_SCENARIO_ALL_ZEROS,
    TEST_SCENARIO_MAX_VALUES,
    TEST_SCENARIO_COUNT
} test_scenario_t;

// Scenario-specific data
static const mpu6050_data_t scenario_data[TEST_SCENARIO_COUNT] = {
    // Normal operation
    { 1000, 2000, 16384, 23000, 100, 200, 300 },
    // High acceleration
    { 30000, -25000, 20000, 23000, 100, 200, 300 },  
    // High gyroscope readings
    { 1000, 2000, 16384, 23000, 30000, -25000, 28000 },
    // Extreme temperature
    { 1000, 2000, 16384, -13000, 100, 200, 300 },  // ~-75°C
    // All zeros (potential error condition)
    { 0, 0, 0, 0, 0, 0, 0 },
    // Maximum values (saturation test)
    { 32767, 32767, 32767, 32767, 32767, 32767, 32767 }
};

// Helper functions for converting raw values
static inline float accel_raw_to_g(int16_t raw) {
    return (float)raw / 16384.0f;  // ±2g range, 16-bit
}

static inline float gyro_raw_to_dps(int16_t raw) {
    return (float)raw / 131.0f;  // ±250°/s range
}

static inline float temp_raw_to_celsius(int16_t raw) {
    return (float)raw / 340.0f + 36.53f;
}

#endif // SENSOR_DATA_H
