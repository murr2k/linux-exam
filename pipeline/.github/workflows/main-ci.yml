name: Main CI/CD Pipeline
on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      force_full_suite:
        description: 'Force full test suite execution'
        required: false
        default: false
        type: boolean

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  CACHE_KEY_PREFIX: 'pipeline-v2'
  NODE_VERSION: '18'
  QUALITY_THRESHOLD: '100'
  PERFORMANCE_BASELINE: '85'

jobs:
  # Pipeline Initialization
  initialize:
    name: 🚀 Initialize Pipeline
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache.outputs.cache-key }}
      test-strategy: ${{ steps.strategy.outputs.strategy }}
      matrix-config: ${{ steps.matrix.outputs.config }}
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🗄️ Generate Cache Key
        id: cache
        run: |
          CACHE_KEY="${{ env.CACHE_KEY_PREFIX }}-${{ runner.os }}-$(date +%Y%m%d)-${{ hashFiles('**/package-lock.json') }}"
          echo "cache-key=$CACHE_KEY" >> $GITHUB_OUTPUT

      - name: 📦 Install Dependencies
        run: |
          npm ci --prefer-offline --no-audit
          npm run validate

      - name: 🎯 Determine Test Strategy
        id: strategy
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ github.event.inputs.force_full_suite }}" == "true" ]]; then
            echo "strategy=full" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "strategy=comprehensive" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "strategy=selective" >> $GITHUB_OUTPUT
          else
            echo "strategy=standard" >> $GITHUB_OUTPUT
          fi

      - name: 📐 Generate Matrix Configuration
        id: matrix
        run: |
          node scripts/generate-matrix.js \
            --strategy="${{ steps.strategy.outputs.strategy }}" \
            --ref="${{ github.ref }}" \
            --event="${{ github.event_name }}"

  # Quality Assurance Foundation
  code-quality:
    name: 📋 Code Quality
    needs: [initialize]
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🔧 Setup Environment
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🗄️ Restore Dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.npm
            node_modules
          key: ${{ needs.initialize.outputs.cache-key }}
          restore-keys: |
            ${{ env.CACHE_KEY_PREFIX }}-${{ runner.os }}-

      - name: 📦 Install Dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 🧹 Lint Code
        run: |
          npm run lint:check
          npm run lint:report

      - name: 📏 Format Check
        run: npm run format:check

      - name: 🔍 Type Check
        run: npm run typecheck

      - name: 📊 Complexity Analysis
        run: |
          mkdir -p reports/complexity
          npx complexity-report \
            --format json \
            --output reports/complexity/complexity-report.json \
            src/

      - name: 📋 Upload Quality Reports
        uses: actions/upload-artifact@v3
        with:
          name: code-quality-reports
          path: reports/
          retention-days: 30

  # Intelligent Test Execution
  test-suite:
    name: 🧪 Test Suite
    needs: [initialize, code-quality]
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.initialize.outputs.matrix-config) }}
      fail-fast: false
    env:
      TEST_STRATEGY: ${{ needs.initialize.outputs.test-strategy }}
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🔧 Setup Test Environment
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🗄️ Restore Test Cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.npm
            node_modules
            .nyc_output
            coverage
            test-results
            .cache
          key: test-${{ needs.initialize.outputs.cache-key }}-${{ matrix.suite }}
          restore-keys: |
            test-${{ env.CACHE_KEY_PREFIX }}-${{ runner.os }}-${{ matrix.suite }}

      - name: 📦 Install Dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 🏃 Execute Test Suite
        run: |
          node scripts/intelligent-test-runner.js \
            --suite="${{ matrix.suite }}" \
            --strategy="${{ env.TEST_STRATEGY }}" \
            --parallel \
            --coverage \
            --timeout=30000 \
            --reporter=json,html,junit

      - name: 📊 Process Test Results
        if: always()
        run: |
          node scripts/test-processor.js \
            --suite="${{ matrix.suite }}" \
            --results-path="test-results" \
            --coverage-path="coverage"

      - name: 🎯 Quality Gate Check
        run: |
          node scripts/quality-gate-checker.js \
            --suite="${{ matrix.suite }}" \
            --threshold="${{ env.QUALITY_THRESHOLD }}" \
            --coverage-threshold=90

      - name: 📋 Upload Test Results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results-${{ matrix.suite }}
          path: |
            test-results/
            coverage/
            reports/
          retention-days: 30

      - name: 📊 Test Summary
        if: always()
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const summaryPath = `test-results/${context.matrix.suite}/summary.json`;
            if (fs.existsSync(summaryPath)) {
              const summary = JSON.parse(fs.readFileSync(summaryPath, 'utf8'));
              core.summary
                .addHeading(`Test Results: ${context.matrix.suite}`)
                .addTable([
                  [{data: 'Metric', header: true}, {data: 'Value', header: true}],
                  ['Tests Run', summary.testsRun.toString()],
                  ['Passed', summary.testsPassed.toString()],
                  ['Failed', summary.testsFailed.toString()],
                  ['Coverage', `${summary.coverage}%`],
                  ['Duration', `${summary.duration}ms`]
                ])
                .write();
            }

  # Performance & Load Testing
  performance-tests:
    name: ⚡ Performance Tests
    needs: [initialize, test-suite]
    if: contains(needs.initialize.outputs.test-strategy, 'comprehensive') || contains(needs.initialize.outputs.test-strategy, 'full')
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test-type: [load, stress, endurance]
    services:
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🔧 Setup Performance Environment
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: |
          npm ci --prefer-offline --no-audit
          npm install -g k6 autocannon

      - name: 🚀 Start Application
        run: |
          npm run build
          npm start &
          sleep 15
          curl --retry 5 --retry-delay 3 http://localhost:3000/health

      - name: ⚡ Run Performance Tests
        run: |
          mkdir -p performance-results
          node scripts/performance-runner.js \
            --type="${{ matrix.test-type }}" \
            --baseline="${{ env.PERFORMANCE_BASELINE }}" \
            --output="performance-results/${{ matrix.test-type }}.json"

      - name: 📊 Analyze Performance
        run: |
          node scripts/performance-analyzer.js \
            --results="performance-results/${{ matrix.test-type }}.json" \
            --baseline="performance-baseline/${{ matrix.test-type }}.json" \
            --threshold="${{ env.PERFORMANCE_BASELINE }}"

      - name: 📋 Upload Performance Reports
        uses: actions/upload-artifact@v3
        with:
          name: performance-results-${{ matrix.test-type }}
          path: |
            performance-results/
            performance-reports/
          retention-days: 30

  # Security & Compliance
  security-scan:
    name: 🔒 Security Scan
    needs: [initialize, code-quality]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        scan-type: [sast, dependency, secrets, container]
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🔧 Setup Security Environment
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        if: matrix.scan-type != 'container'
        run: npm ci --prefer-offline --no-audit

      - name: 🔍 SAST Scan
        if: matrix.scan-type == 'sast'
        uses: github/codeql-action/init@v2
        with:
          languages: javascript

      - name: 🔍 Dependency Scan
        if: matrix.scan-type == 'dependency'
        run: |
          mkdir -p security-reports
          npm audit --audit-level=moderate --json > security-reports/npm-audit.json
          npx audit-ci --config .audit-ci.json

      - name: 🔐 Secrets Scan
        if: matrix.scan-type == 'secrets'
        run: |
          mkdir -p security-reports
          npx secretlint "**/*" \
            --format json \
            --output security-reports/secrets.json

      - name: 🐳 Container Scan
        if: matrix.scan-type == 'container'
        run: |
          docker build -t pipeline-test-image .
          docker run --rm \
            -v /var/run/docker.sock:/var/run/docker.sock \
            -v $(pwd)/security-reports:/tmp \
            aquasec/trivy image \
            --format json \
            --output /tmp/container-scan.json \
            pipeline-test-image

      - name: 🔒 Complete SAST Analysis
        if: matrix.scan-type == 'sast'
        uses: github/codeql-action/analyze@v2

      - name: 📊 Generate Security Report
        run: |
          mkdir -p security-reports
          node scripts/security-reporter.js \
            --scan-type="${{ matrix.scan-type }}" \
            --output="security-reports/${{ matrix.scan-type }}-report.json"

      - name: 📋 Upload Security Reports
        uses: actions/upload-artifact@v3
        with:
          name: security-reports-${{ matrix.scan-type }}
          path: security-reports/
          retention-days: 90

  # Build & Package
  build:
    name: 🔨 Build & Package
    needs: [test-suite, security-scan]
    if: success()
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [production, staging]
    outputs:
      build-version: ${{ steps.version.outputs.version }}
      artifacts: ${{ steps.artifacts.outputs.artifacts }}
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🔧 Setup Build Environment
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🗄️ Restore Build Cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.npm
            node_modules
            dist
            .build-cache
          key: build-${{ needs.initialize.outputs.cache-key }}-${{ matrix.target }}
          restore-keys: |
            build-${{ env.CACHE_KEY_PREFIX }}-${{ runner.os }}-${{ matrix.target }}

      - name: 📦 Install Dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 📊 Generate Version
        id: version
        run: |
          VERSION=$(node -p "require('./package.json').version")-${{ github.sha }}-${{ matrix.target }}
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: 🔨 Build Application
        run: |
          NODE_ENV=${{ matrix.target }} npm run build
          npm run optimize:${{ matrix.target }}

      - name: 🧪 Test Build
        run: |
          npm run test:build:${{ matrix.target }}
          node scripts/build-validator.js --target=${{ matrix.target }}

      - name: 📦 Package Artifacts
        id: artifacts
        run: |
          mkdir -p artifacts
          tar czf artifacts/app-${{ steps.version.outputs.version }}.tar.gz \
            dist/ package.json package-lock.json
          
          echo "artifacts=app-${{ steps.version.outputs.version }}.tar.gz" >> $GITHUB_OUTPUT

      - name: 📋 Upload Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-${{ matrix.target }}
          path: artifacts/
          retention-days: 30

  # Integration Testing
  integration:
    name: 🔗 Integration Tests
    needs: [build]
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🔧 Setup Integration Environment
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: |
          npm ci --prefer-offline --no-audit
          npx playwright install chromium

      - name: 📥 Download Build
        uses: actions/download-artifact@v3
        with:
          name: build-staging
          path: artifacts/

      - name: 🚀 Deploy Test Environment
        run: |
          tar xzf artifacts/*.tar.gz
          node scripts/test-deploy.js --environment=integration

      - name: 🧪 Run Integration Tests
        run: |
          npm run test:integration \
            --environment=integration \
            --parallel \
            --reporter=json,html

      - name: 📊 Integration Report
        if: always()
        run: |
          node scripts/integration-reporter.js \
            --results=integration-results/ \
            --environment=integration

      - name: 📋 Upload Integration Results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: integration-results
          path: |
            integration-results/
            screenshots/
          retention-days: 30

  # Final Pipeline Report
  pipeline-report:
    name: 📊 Pipeline Report
    needs: [test-suite, performance-tests, security-scan, build, integration]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🔧 Setup Reporting Environment
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 📥 Download All Reports
        uses: actions/download-artifact@v3
        with:
          path: all-reports/

      - name: 📊 Generate Comprehensive Report
        run: |
          node scripts/comprehensive-reporter.js \
            --reports-path=all-reports/ \
            --run-id="${{ github.run_id }}" \
            --commit="${{ github.sha }}" \
            --branch="${{ github.ref_name }}" \
            --output-formats=html,json,pdf

      - name: 📈 Performance Trends
        run: |
          node scripts/trend-analyzer.js \
            --current-run="${{ github.run_id }}" \
            --historical-data=performance-history/

      - name: 📋 Upload Final Report
        uses: actions/upload-artifact@v3
        with:
          name: pipeline-comprehensive-report
          path: |
            comprehensive-report/
            performance-trends/
          retention-days: 90

      - name: 💬 Comment PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const reportPath = 'comprehensive-report/summary.md';
            if (fs.existsSync(reportPath)) {
              const report = fs.readFileSync(reportPath, 'utf8');
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `## 📊 Pipeline Report\n\n${report}`
              });
            }