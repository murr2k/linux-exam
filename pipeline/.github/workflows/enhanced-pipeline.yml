name: Enhanced CI/CD Pipeline
on:
  push:
    branches: [main, develop, feature/*, release/*]
    paths-ignore: ['**/*.md', 'docs/**', '*.txt']
  pull_request:
    branches: [main, develop]
    paths-ignore: ['**/*.md', 'docs/**', '*.txt']
  schedule:
    - cron: '0 6 * * 1' # Weekly full pipeline run
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Test type to run'
        required: false
        default: 'selective'
        type: choice
        options:
          - selective
          - full
          - performance
          - security
      environment:
        description: 'Target environment'
        required: false
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      force_rebuild:
        description: 'Force rebuild all caches'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '18'
  CACHE_VERSION: 'v2'
  PERFORMANCE_THRESHOLD: '85'
  QUALITY_THRESHOLD: '100'
  SECURITY_SCAN_ENABLED: true

jobs:
  # Change Detection and Planning
  detect-changes:
    name: 🔍 Change Detection & Planning
    runs-on: ubuntu-latest
    outputs:
      affected-areas: ${{ steps.detect.outputs.affected-areas }}
      test-strategy: ${{ steps.strategy.outputs.test-strategy }}
      cache-invalidation: ${{ steps.cache.outputs.invalidation-needed }}
      performance-check: ${{ steps.perf.outputs.performance-check }}
      security-scan: ${{ steps.security.outputs.security-scan }}
      matrix-config: ${{ steps.matrix.outputs.matrix-config }}
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'

      - name: 📦 Install Dependencies
        run: |
          npm ci --prefer-offline --no-audit
          npm run validate

      - name: 🕵️ Detect Changes
        id: detect
        run: |
          node scripts/change-detector.js \
            --base-ref="${{ github.event_name == 'pull_request' && github.event.pull_request.base.sha || 'HEAD~1' }}" \
            --head-ref="${{ github.sha }}" \
            --output-format=github

      - name: 📋 Plan Test Strategy
        id: strategy
        run: |
          node scripts/test-strategy-planner.js \
            --changes="${{ steps.detect.outputs.changed-files }}" \
            --test-type="${{ github.event.inputs.test_type || 'selective' }}" \
            --event-type="${{ github.event_name }}"

      - name: 🗄️ Cache Analysis
        id: cache
        run: |
          node scripts/cache-analyzer.js \
            --changes="${{ steps.detect.outputs.changed-files }}" \
            --force-rebuild="${{ github.event.inputs.force_rebuild || 'false' }}"

      - name: 📊 Performance Check Planning
        id: perf
        run: |
          node scripts/performance-planner.js \
            --affected-areas="${{ steps.detect.outputs.affected-areas }}"

      - name: 🔒 Security Scan Planning
        id: security
        run: |
          node scripts/security-planner.js \
            --changes="${{ steps.detect.outputs.changed-files }}" \
            --enabled="${{ env.SECURITY_SCAN_ENABLED }}"

      - name: 📐 Generate Matrix Config
        id: matrix
        run: |
          node scripts/matrix-generator.js \
            --test-strategy="${{ steps.strategy.outputs.test-strategy }}" \
            --affected-areas="${{ steps.detect.outputs.affected-areas }}"

  # Quality Gates & Validation
  quality-gates:
    name: 🛡️ Quality Gates
    needs: [detect-changes]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include: ${{ fromJson(needs.detect-changes.outputs.matrix-config) }}
      fail-fast: false
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Restore Dependencies Cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.npm
            node_modules
            .cache
          key: deps-${{ env.CACHE_VERSION }}-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            deps-${{ env.CACHE_VERSION }}-${{ runner.os }}-

      - name: 📦 Install Dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 🧹 Code Quality Check
        run: |
          npm run lint:check
          npm run format:check
          npm run typecheck

      - name: 📏 Complexity Analysis
        run: |
          npx complexity-report \
            --format json \
            --output reports/complexity.json \
            src/

      - name: 🎯 Quality Metrics
        run: |
          node scripts/quality-metrics.js \
            --area="${{ matrix.area }}" \
            --threshold="${{ env.QUALITY_THRESHOLD }}"

  # Enhanced Testing Suite
  test-execution:
    name: 🧪 Enhanced Testing
    needs: [detect-changes, quality-gates]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include: ${{ fromJson(needs.detect-changes.outputs.matrix-config) }}
      fail-fast: false
    env:
      TEST_STRATEGY: ${{ needs.detect-changes.outputs.test-strategy }}
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔧 Setup Test Environment
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🗄️ Restore Multi-Layer Cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.npm
            node_modules
            .cache
            .nyc_output
            coverage
            test-results
          key: test-cache-${{ env.CACHE_VERSION }}-${{ runner.os }}-${{ matrix.area }}-${{ hashFiles('**/package-lock.json', 'tests/**/*.js') }}
          restore-keys: |
            test-cache-${{ env.CACHE_VERSION }}-${{ runner.os }}-${{ matrix.area }}-
            test-cache-${{ env.CACHE_VERSION }}-${{ runner.os }}-

      - name: 📦 Install Dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 🏃 Execute Intelligent Tests
        id: test
        run: |
          node scripts/intelligent-test-runner.js \
            --strategy="${{ env.TEST_STRATEGY }}" \
            --area="${{ matrix.area }}" \
            --changes="${{ needs.detect-changes.outputs.affected-areas }}" \
            --parallel \
            --fast-fail \
            --coverage \
            --reporter=json,html,lcov

      - name: 📊 Test Results Analysis
        if: always()
        run: |
          node scripts/test-analysis.js \
            --results-path=test-results \
            --coverage-path=coverage \
            --matrix-area="${{ matrix.area }}"

      - name: 📋 Upload Test Results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results-${{ matrix.area }}
          path: |
            test-results/
            coverage/
            reports/
          retention-days: 30

      - name: 📈 Test Metrics Collection
        if: always()
        run: |
          node scripts/test-metrics-collector.js \
            --area="${{ matrix.area }}" \
            --execution-id="${{ github.run_id }}"

  # Performance & Load Testing
  performance-testing:
    name: ⚡ Performance Testing
    needs: [detect-changes, quality-gates]
    if: needs.detect-changes.outputs.performance-check == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test-type: [load, stress, spike, endurance]
        environment: [staging]
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔧 Setup Performance Environment
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: |
          npm ci --prefer-offline --no-audit
          npm install -g k6 autocannon clinic

      - name: 🚀 Setup Test Environment
        run: |
          docker-compose -f docker-compose.test.yml up -d
          sleep 30

      - name: ⚡ Run Performance Tests
        run: |
          node scripts/performance-test-runner.js \
            --type="${{ matrix.test-type }}" \
            --environment="${{ matrix.environment }}" \
            --threshold="${{ env.PERFORMANCE_THRESHOLD }}" \
            --duration=300s

      - name: 📊 Performance Analysis
        run: |
          node scripts/performance-analyzer.js \
            --results-path=performance-results \
            --baseline-path=performance-baseline \
            --threshold="${{ env.PERFORMANCE_THRESHOLD }}"

      - name: 📈 Upload Performance Reports
        uses: actions/upload-artifact@v3
        with:
          name: performance-results-${{ matrix.test-type }}
          path: |
            performance-results/
            performance-reports/
          retention-days: 30

      - name: 🔄 Cleanup Test Environment
        if: always()
        run: docker-compose -f docker-compose.test.yml down

  # Security Scanning Suite
  security-scanning:
    name: 🔒 Security Scanning
    needs: [detect-changes, quality-gates]
    if: needs.detect-changes.outputs.security-scan == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        scan-type: [sast, dependency, container, secrets]
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔒 SAST Analysis
        if: matrix.scan-type == 'sast'
        uses: github/codeql-action/init@v2
        with:
          languages: javascript

      - name: 🔍 Dependency Vulnerability Scan
        if: matrix.scan-type == 'dependency'
        run: |
          npm audit --audit-level=moderate --json > security-reports/npm-audit.json
          npx retire --outputformat json --outputpath security-reports/retire.json || true

      - name: 🐳 Container Security Scan
        if: matrix.scan-type == 'container'
        run: |
          docker build -t pipeline-app .
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            -v $(pwd)/security-reports:/tmp \
            aquasec/trivy image \
            --format json --output /tmp/trivy-report.json \
            pipeline-app

      - name: 🔐 Secrets Detection
        if: matrix.scan-type == 'secrets'
        run: |
          npx secretlint "**/*" --format json \
            --output security-reports/secrets.json || true

      - name: 🔒 Complete SAST Analysis
        if: matrix.scan-type == 'sast'
        uses: github/codeql-action/analyze@v2
        with:
          category: "/language:javascript"
          upload: true

      - name: 📊 Security Report Generation
        run: |
          node scripts/security-report-generator.js \
            --scan-type="${{ matrix.scan-type }}" \
            --results-path=security-reports

      - name: 📋 Upload Security Reports
        uses: actions/upload-artifact@v3
        with:
          name: security-reports-${{ matrix.scan-type }}
          path: security-reports/
          retention-days: 90

  # Build & Artifact Generation
  build-artifacts:
    name: 🔨 Build & Artifacts
    needs: [test-execution, performance-testing, security-scanning]
    if: always() && (needs.test-execution.result == 'success' || needs.test-execution.result == 'skipped')
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [production, staging]
        platform: [linux/amd64, linux/arm64]
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔧 Setup Build Environment
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🗄️ Restore Build Cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.npm
            node_modules
            dist
            .build-cache
          key: build-${{ env.CACHE_VERSION }}-${{ runner.os }}-${{ matrix.target }}-${{ hashFiles('**/package-lock.json', 'src/**/*') }}
          restore-keys: |
            build-${{ env.CACHE_VERSION }}-${{ runner.os }}-${{ matrix.target }}-
            build-${{ env.CACHE_VERSION }}-${{ runner.os }}-

      - name: 📦 Install Dependencies
        run: npm ci --prefer-offline --no-audit --production=false

      - name: 🔨 Build Application
        run: |
          NODE_ENV=${{ matrix.target }} npm run build
          npm run build:${{ matrix.target }}

      - name: 🐳 Build Container Image
        run: |
          docker buildx build \
            --platform ${{ matrix.platform }} \
            --target ${{ matrix.target }} \
            --tag pipeline-app:${{ github.sha }}-${{ matrix.target }}-${{ matrix.platform }} \
            --cache-from type=gha \
            --cache-to type=gha,mode=max \
            .

      - name: 🧪 Test Built Artifacts
        run: |
          node scripts/artifact-tester.js \
            --target="${{ matrix.target }}" \
            --platform="${{ matrix.platform }}"

      - name: 📦 Package Artifacts
        run: |
          tar czf pipeline-app-${{ matrix.target }}-${{ matrix.platform }}.tar.gz \
            dist/ \
            package.json \
            package-lock.json

      - name: 📋 Upload Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts-${{ matrix.target }}-${{ matrix.platform }}
          path: |
            *.tar.gz
            build-reports/
          retention-days: 30

  # Integration & End-to-End Testing
  integration-testing:
    name: 🔗 Integration Testing
    needs: [build-artifacts]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        environment: [staging]
        browser: [chromium, firefox, webkit]
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔧 Setup Test Environment
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: |
          npm ci --prefer-offline --no-audit
          npx playwright install ${{ matrix.browser }}

      - name: 📥 Download Build Artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts-staging-linux/amd64
          path: artifacts/

      - name: 🚀 Deploy to Test Environment
        run: |
          tar xzf artifacts/pipeline-app-staging-linux/amd64.tar.gz
          node scripts/test-deployment.js \
            --environment="${{ matrix.environment }}" \
            --wait-for-health

      - name: 🧪 Run Integration Tests
        run: |
          npm run test:integration \
            --browser=${{ matrix.browser }} \
            --environment=${{ matrix.environment }} \
            --parallel \
            --retry=2

      - name: 🎭 Run E2E Tests
        run: |
          npm run test:e2e \
            --browser=${{ matrix.browser }} \
            --environment=${{ matrix.environment }} \
            --headed=false

      - name: 📊 Generate Test Reports
        if: always()
        run: |
          node scripts/integration-test-reporter.js \
            --browser="${{ matrix.browser }}" \
            --environment="${{ matrix.environment }}"

      - name: 📋 Upload Integration Reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: integration-results-${{ matrix.environment }}-${{ matrix.browser }}
          path: |
            integration-results/
            screenshots/
            videos/
          retention-days: 30

  # Pipeline Analytics & Reporting
  pipeline-analytics:
    name: 📊 Pipeline Analytics
    needs: [test-execution, performance-testing, security-scanning, integration-testing]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔧 Setup Analytics Environment
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 📥 Download All Reports
        uses: actions/download-artifact@v3
        with:
          path: reports/

      - name: 📊 Generate Pipeline Analytics
        run: |
          node scripts/pipeline-analytics.js \
            --reports-path=reports \
            --run-id="${{ github.run_id }}" \
            --commit="${{ github.sha }}" \
            --branch="${{ github.ref_name }}"

      - name: 📈 Performance Trend Analysis
        run: |
          node scripts/performance-trends.js \
            --current-results=reports/performance-results-*/ \
            --historical-data=performance-history/

      - name: 🎯 Quality Metrics Dashboard
        run: |
          node scripts/quality-dashboard.js \
            --test-results=reports/test-results-*/ \
            --security-results=reports/security-reports-*/ \
            --coverage-results=reports/test-results-*/coverage/

      - name: 📋 Generate Comprehensive Report
        run: |
          node scripts/comprehensive-report-generator.js \
            --run-id="${{ github.run_id }}" \
            --output-format=html,json,pdf

      - name: 📊 Upload Analytics Reports
        uses: actions/upload-artifact@v3
        with:
          name: pipeline-analytics-${{ github.run_id }}
          path: |
            analytics-reports/
            performance-trends/
            quality-dashboard/
          retention-days: 90

      - name: 💬 Post PR Comment
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const reportPath = 'analytics-reports/summary.md';
            if (fs.existsSync(reportPath)) {
              const report = fs.readFileSync(reportPath, 'utf8');
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: report
              });
            }

  # Deployment Pipeline
  deploy:
    name: 🚀 Deployment
    needs: [integration-testing, pipeline-analytics]
    if: success() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    runs-on: ubuntu-latest
    environment: 
      name: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}
      url: ${{ steps.deploy.outputs.environment-url }}
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 📥 Download Build Artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts-${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}-linux/amd64
          path: artifacts/

      - name: 🚀 Deploy Application
        id: deploy
        run: |
          node scripts/deployment-orchestrator.js \
            --environment="${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}" \
            --artifacts-path=artifacts/ \
            --strategy=blue-green \
            --health-check \
            --rollback-on-failure

      - name: ✅ Deployment Verification
        run: |
          node scripts/deployment-verifier.js \
            --environment-url="${{ steps.deploy.outputs.environment-url }}" \
            --health-endpoints=health,metrics,ready \
            --timeout=300

      - name: 📊 Post-Deployment Analytics
        run: |
          node scripts/post-deployment-analytics.js \
            --deployment-id="${{ steps.deploy.outputs.deployment-id }}" \
            --environment="${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}"

  # Cleanup & Optimization
  cleanup:
    name: 🧹 Cleanup & Optimization
    needs: [deploy, pipeline-analytics]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔧 Setup Environment
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 🧹 Cache Optimization
        run: |
          node scripts/cache-optimizer.js \
            --run-id="${{ github.run_id }}" \
            --optimize-for-next-run

      - name: 📊 Performance Optimization
        run: |
          node scripts/pipeline-optimizer.js \
            --analytics-data=analytics-reports/ \
            --generate-recommendations

      - name: 🗄️ Artifact Cleanup
        run: |
          node scripts/artifact-cleanup.js \
            --retention-policy=30d \
            --cleanup-old-reports \
            --compress-archives

      - name: 📈 Pipeline Metrics Collection
        run: |
          node scripts/pipeline-metrics.js \
            --run-id="${{ github.run_id }}" \
            --duration="${{ github.event.head_commit.timestamp }}" \
            --export-to-monitoring