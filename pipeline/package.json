{
  "name": "pipeline-performance-optimizer",
  "version": "1.0.0",
  "description": "Comprehensive pipeline performance optimization system with 100% test quality maintenance",
  "main": "src/pipeline-orchestrator.js",
  "bin": {
    "optimize-pipeline": "./scripts/optimize-pipeline.js"
  },
  "scripts": {
    "start": "node src/pipeline-orchestrator.js",
    "optimize": "node scripts/optimize-pipeline.js",
    "test": "jest",
    "test:watch": "jest --watch",
    "test:coverage": "jest --coverage",
    "test:performance": "jest --testNamePattern=\"Performance Tests\"",
    "test:unit": "node scripts/intelligent-test-runner.js --suite=unit --strategy=selective --parallel --coverage",
    "test:integration": "node scripts/intelligent-test-runner.js --suite=integration --strategy=standard --parallel",
    "test:e2e": "node scripts/intelligent-test-runner.js --suite=e2e --strategy=standard --timeout=600000",
    "test:all": "node scripts/intelligent-test-runner.js --suite=all --strategy=comprehensive --parallel --coverage",
    "lint": "eslint src/ tests/ scripts/",
    "lint:check": "eslint src/ tests/ scripts/",
    "lint:fix": "eslint src/ tests/ scripts/ --fix",
    "format:check": "prettier --check src/ tests/ scripts/ || echo 'Prettier not configured'",
    "format:fix": "prettier --write src/ tests/ scripts/ || echo 'Prettier not configured'",
    "typecheck": "echo 'TypeScript checking not configured'",
    "build": "npm run lint && npm run test",
    "build:production": "NODE_ENV=production npm run build && npm run optimize:production",
    "build:staging": "NODE_ENV=staging npm run build && npm run optimize:staging",
    "optimize:production": "node scripts/optimize-pipeline.js --target=production",
    "optimize:staging": "node scripts/optimize-pipeline.js --target=staging",
    "validate": "npm run lint && npm run test:coverage",
    "benchmark": "node scripts/benchmark.js",
    "orchestrate": "node scripts/pipeline-orchestration.js",
    "monitor": "node scripts/pipeline-monitoring.js",
    "generate-matrix": "node scripts/generate-matrix.js",
    "generate-report": "node scripts/comprehensive-reporter.js",
    "performance:test": "echo 'Performance test runner not implemented yet'",
    "performance:analyze": "echo 'Performance analyzer not implemented yet'",
    "security:scan": "echo 'Security scanner not implemented yet'",
    "security:report": "echo 'Security reporter not implemented yet'",
    "quality:check": "echo 'Quality gate checker not implemented yet'",
    "quality:metrics": "echo 'Quality metrics not implemented yet'",
    "docs:generate": "jsdoc -c jsdoc.conf.json",
    "example:basic": "node scripts/optimize-pipeline.js --pipeline examples/basic-pipeline.yml",
    "example:advanced": "node scripts/optimize-pipeline.js --config examples/advanced-config.json --pipeline examples/complex-pipeline.yml --tests examples/test-suite.json",
    "example:orchestrate": "npm run orchestrate -- --strategy=selective --parallel --coverage",
    "docker:build": "docker build -t pipeline-optimizer .",
    "docker:run": "docker run -v $(pwd):/workspace pipeline-optimizer",
    "ci": "npm run validate && npm run benchmark",
    "ci:enhanced": "npm run orchestrate && npm run generate-report",
    "pipeline:init": "mkdir -p .github/workflows test-suites test-results reports && echo 'Pipeline directories created'",
    "pipeline:validate": "npm run lint && npm run test && echo 'Pipeline validation passed'",
    "pipeline:full": "npm run orchestrate -- --strategy=full --parallel --coverage --security --performance",
    "clean": "rm -rf coverage/ logs/ dist/ node_modules/.cache test-results/ reports/",
    "clean:cache": "rm -rf node_modules/.cache .nyc_output .cache",
    "clean:reports": "rm -rf test-results/ reports/ comprehensive-report/"
  },
  "keywords": [
    "pipeline",
    "optimization",
    "performance",
    "testing",
    "ci-cd",
    "devops",
    "automation",
    "quality",
    "efficiency"
  ],
  "author": "Pipeline Performance Team",
  "license": "MIT",
  "engines": {
    "node": ">=16.0.0",
    "npm": ">=8.0.0"
  },
  "dependencies": {
    "glob": "^10.3.10",
    "yaml": "^2.3.4",
    "commander": "^11.1.0",
    "chalk": "^5.3.0",
    "ora": "^7.0.1",
    "inquirer": "^9.2.12",
    "lodash": "^4.17.21",
    "semver": "^7.5.4",
    "moment": "^2.29.4",
    "uuid": "^9.0.1"
  },
  "devDependencies": {
    "jest": "^29.7.0",
    "eslint": "^8.54.0",
    "eslint-config-standard": "^17.1.0",
    "eslint-plugin-jest": "^27.6.0",
    "eslint-plugin-node": "^11.1.0",
    "@types/jest": "^29.5.8",
    "jsdoc": "^4.0.2",
    "nyc": "^15.1.0",
    "supertest": "^6.3.3",
    "nock": "^13.4.0"
  },
  "jest": {
    "testEnvironment": "node",
    "collectCoverageFrom": [
      "src/**/*.js",
      "!src/**/*.test.js",
      "!**/node_modules/**"
    ],
    "coverageReporters": [
      "text",
      "lcov",
      "html",
      "json"
    ],
    "coverageThreshold": {
      "global": {
        "branches": 80,
        "functions": 85,
        "lines": 85,
        "statements": 85
      }
    },
    "testTimeout": 30000,
    "verbose": true,
    "testPathIgnorePatterns": [
      "/node_modules/",
      "/dist/"
    ]
  },
  "eslintConfig": {
    "extends": [
      "standard",
      "plugin:jest/recommended"
    ],
    "env": {
      "node": true,
      "jest": true,
      "es2022": true
    },
    "parserOptions": {
      "ecmaVersion": 2022,
      "sourceType": "module"
    },
    "rules": {
      "no-console": "off",
      "camelcase": "off",
      "no-unused-vars": ["error", { "argsIgnorePattern": "^_" }]
    }
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/your-org/pipeline-performance-optimizer.git"
  },
  "bugs": {
    "url": "https://github.com/your-org/pipeline-performance-optimizer/issues"
  },
  "homepage": "https://github.com/your-org/pipeline-performance-optimizer#readme",
  "files": [
    "src/",
    "scripts/",
    "config/",
    "examples/",
    "docs/",
    "README.md",
    "LICENSE",
    "CHANGELOG.md"
  ]
}